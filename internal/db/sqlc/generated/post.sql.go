// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (user_id, title, content)
VALUES (?, ?, ?)
`

type CreatePostParams struct {
	UserID  int32
	Title   string
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, user_id, title, content, created_at FROM posts
WHERE id = ?
`

func (q *Queries) GetPostByID(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
SET content = ?
WHERE id = ?
`

type UpdatePostParams struct {
	Content string
	ID      int32
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost, arg.Content, arg.ID)
	return err
}
